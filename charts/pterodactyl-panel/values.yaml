appConfig:
  url: "http://pterodactyl.local"
  env: "production"
  debug: false
  theme: "pterodactyl"
  timezone: "Etc/UTC"
  clearTaskLog: 720
  deleteMinutes: 10
  logChannel: "daily"
  locale: "en"
  # Generated by panel, set only if migrating from other instance
  # hashIds:
  # hashLength:
  mailSecretRef: ""
  mail:
    driver: "smtp"
    host: "mailtrap.io"
    port: 2525
    username: ""
    password: ""
    encryption: "tls"
    from: "no-reply@example.com"
  queue:
    high: "high"
    standart: "standart"
    low: "low"
  appServiceAuthor: "support@example.com"
  cacheDriver: "redis"
  sessionDriver: "redis"
  queueConnection: "redis"
  maxFilesEditSize: "16000000"
  trustedProxies: ""
  appKey:
    secretName: "app-key-secrets"
  hashIds:
    secretName: "hashid-secrets"

# Wether we should use subchart for MariaDB. Set to false to enable external behaviour
mariadb:
  enabled: true
  # Set specific storage class for mariadb.
  # global:
  #   storageClass: "longhorn"
  #  Override base images used by bitnami/mariadb chart (the example below enables support for arm64)
  # image:
  #   digest: ''
  #   registry: ghcr.io
  #   repository: zcube/bitnami-compat/mariadb
  #   tag: 10.9.4-debian-11-r54
  # metrics:
  #   image:
  #     digest: ''
  #     registry: ghcr.io
  #     repository: zcube/bitnami-compat/mysqld-exporter
  #     tag: 0.14.0-debian-11-r54
  # volumePermissions:
  #   image:
  #     digest: ''
  #     registry: ghcr.io
  #     repository: zcube/bitnami-compat/bitnami-shell
  #     tag: 11.0.0-debian-11-r54
  auth:
    database: pterodactyl-db
    username: pterodactyl-user
    host: ""
    port: 3306
    password: "verystrongpassword"

# Wether we should use subchart for Redis. Set to false to enable external behaviour
redis:
  enabled: true
  #  Set specific storage class for mariadb.
  # global:
  #   storageClass: "longhorn"
  #  Override base images used by bitnami/redis chart (the example below enables support for arm64)
  # image:
  #   digest: ""
  #   registry: ghcr.io
  #   repository: zcube/bitnami-compat/redis
  #   tag: 7.0.8-debian-11-r54
  # metrics:
  #   image:
  #     digest: ""
  #     registry: ghcr.io
  #     repository: zcube/bitnami-compat/redis-exporter
  #     tag: 1.46.0-debian-11-r54
  # sentinel:
  #   image:
  #     digest: ""
  #     registry: ghcr.io
  #     repository: zcube/bitnami-compat/redis-sentinel
  #     tag: 7.0.8-debian-11-r54
  # sysctl:
  #   image:
  #     digest: ""
  #     registry: ghcr.io
  #     repository: zcube/bitnami-compat/bitnami-shell
  #     tag: 11.0.0-debian-11-r54
  # volumePermissions:
  #   image:
  #     digest: ""
  #     registry: ghcr.io
  #     repository: zcube/bitnami-compat/bitnami-shell
  #     tag: 11.0.0-debian-11-r54
  replica:
    replicaCount: 0
  auth:
    enabled: true
    # Host is not used when
    host: 127.0.0.1
    port: 6379
    password: "verystrongpassword"

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  type: pvc
  enabled: true
  # Set storage class otherwise default will be used.
  # storageClassName: "longhorn"
  accessModes:
    - ReadWriteOnce
  size: 4Gi
  finalizers:
    - kubernetes.io/pvc-protection
  extraPvcLabels: {}

  ## If persistence is not enabled, this allows to mount the
  ## local storage in-memory to improve performance
  ##
  inMemory:
    enabled: false
    ## The maximum usage on memory medium EmptyDir would be
    ## the minimum value between the SizeLimit specified
    ## here and the sum of memory limits of all containers in a pod
    ##
    # sizeLimit: 300Mi

replicaCount: 1

image:
  repository: ghcr.io/pterodactyl/panel
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: pterodactyl.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: panel-example-tls
  #    hosts:
  #      - panel.example.com

resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: "1"
  maxReplicas: "100"
  targetCPUUtilizationPercentage: "80"
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
